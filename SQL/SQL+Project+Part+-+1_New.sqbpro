<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="F:/University of Texas at Austin/Structured Query Language/SQL Project/New Orders.db" readonly="0" foreign_keys="0" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="0" synchronous="1"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1901"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainADDRESS"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="ADDRESS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="90"/><column index="2" value="300"/><column index="3" value="261"/><column index="4" value="111"/><column index="5" value="98"/><column index="6" value="62"/><column index="7" value="66"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-------------------BELOW IS QUESTION-1-------------------

SELECT PRODUCT.PRODUCT_ID, PRODUCT.PRODUCT_CLASS_CODE, PRODUCT.PRODUCT_DESC,
	CASE
			WHEN PRODUCT_CLASS_CODE = 2050 THEN PRODUCT_PRICE + 2000
			WHEN PRODUCT_CLASS_CODE = 2051 THEN PRODUCT_PRICE + 500
			WHEN PRODUCT_CLASS_CODE = 2052 THEN PRODUCT_PRICE + 600
			ELSE PRODUCT_PRICE
	END AS PRODUCT_PRICE
FROM PRODUCT
ORDER BY PRODUCT.PRODUCT_CLASS_CODE DESC;

-------------------BELOW IS QUESTION-2-------------------

SELECT PRODUCT_CLASS.PRODUCT_CLASS_DESC, PRODUCT.PRODUCT_DESC, PRODUCT.PRODUCT_ID, PRODUCT.PRODUCT_QUANTITY_AVAIL,
CASE
	WHEN PRODUCT.PRODUCT_CLASS_CODE = 2050 AND PRODUCT.PRODUCT_QUANTITY_AVAIL &lt;= 10 THEN 'Low stock'
	WHEN PRODUCT.PRODUCT_CLASS_CODE = 2053 AND PRODUCT.PRODUCT_QUANTITY_AVAIL &lt;= 10 THEN 'Low stock'
	WHEN PRODUCT.PRODUCT_CLASS_CODE = 2050 AND PRODUCT.PRODUCT_QUANTITY_AVAIL BETWEEN 11 AND 30 THEN 'In stock'
	WHEN PRODUCT.PRODUCT_CLASS_CODE = 2053 AND PRODUCT.PRODUCT_QUANTITY_AVAIL BETWEEN 11 AND 30 THEN 'In stock'
	WHEN PRODUCT.PRODUCT_CLASS_CODE = 2050 AND PRODUCT.PRODUCT_QUANTITY_AVAIL &gt;= 31 THEN 'Enough stock'
	WHEN PRODUCT.PRODUCT_CLASS_CODE = 2050 AND PRODUCT.PRODUCT_QUANTITY_AVAIL &gt;= 31 THEN 'Enough stock'
	WHEN PRODUCT.PRODUCT_CLASS_CODE = 2056 AND PRODUCT.PRODUCT_QUANTITY_AVAIL &lt;= 20 THEN 'Low stock'
	WHEN PRODUCT.PRODUCT_CLASS_CODE = 2052 AND PRODUCT.PRODUCT_QUANTITY_AVAIL &lt;= 20 THEN 'Low stock'
	WHEN PRODUCT.PRODUCT_CLASS_CODE = 2056 AND PRODUCT.PRODUCT_QUANTITY_AVAIL BETWEEN 21 AND 80 THEN 'In stock'
	WHEN PRODUCT.PRODUCT_CLASS_CODE = 2052 AND PRODUCT.PRODUCT_QUANTITY_AVAIL BETWEEN 21 AND 80 THEN 'In stock'
	WHEN PRODUCT.PRODUCT_CLASS_CODE = 2056 AND PRODUCT.PRODUCT_QUANTITY_AVAIL &gt;= 81 THEN 'Enough stock'
	WHEN PRODUCT.PRODUCT_CLASS_CODE = 2052 AND PRODUCT.PRODUCT_QUANTITY_AVAIL &gt;= 81 THEN 'Enough stock'
	WHEN PRODUCT.PRODUCT_QUANTITY_AVAIL &lt;= 15 THEN 'Low stock'
	WHEN PRODUCT.PRODUCT_QUANTITY_AVAIL BETWEEN 16 AND 50 THEN 'In stock'
	WHEN PRODUCT.PRODUCT_QUANTITY_AVAIL &gt;= 51 THEN 'Enough stock'
	WHEN PRODUCT.PRODUCT_QUANTITY_AVAIL = 0 THEN 'Enough stock'
	ELSE 'Unknown'
END
FROM PRODUCT INNER JOIN PRODUCT_CLASS ON
PRODUCT.PRODUCT_CLASS_CODE = PRODUCT_CLASS.PRODUCT_CLASS_CODE;

-------------------BELOW IS QUESTION-3-------------------

SELECT count(CITY), COUNTRY FROM ADDRESS
WHERE COUNTRY != 'USA' AND COUNTRY != 'Malaysia'
GROUP BY COUNTRY
HAVING COUNT(CITY) &gt; 1
ORDER BY count(CITY) DESC

-------------------BELOW IS QUESTION-4-------------------

CREATE TABLE A as SELECT ONLINE_CUSTOMER.CUSTOMER_ID, ONLINE_CUSTOMER.CUSTOMER_FNAME, ADDRESS.CITY, ADDRESS.PINCODE
FROM ONLINE_CUSTOMER INNER JOIN ADDRESS
ON ONLINE_CUSTOMER.ADDRESS_ID = ADDRESS.ADDRESS_ID;

SELECT * FROM A

CREATE TABLE B3 as SELECT ORDER_HEADER.ORDER_ID, ORDER_HEADER.CUSTOMER_ID, ORDER_ITEMS.PRODUCT_QUANTITY, ORDER_ITEMS.PRODUCT_ID
FROM ORDER_HEADER INNER JOIN ORDER_ITEMS
ON ORDER_HEADER.ORDER_ID = ORDER_ITEMS.ORDER_ID;

SELECT * FROM B3

CREATE TABLE D1 as SELECT PRODUCT_CLASS.PRODUCT_CLASS_DESC, PRODUCT.PRODUCT_DESC, PRODUCT.PRODUCT_PRICE, PRODUCT.PRODUCT_ID
FROM PRODUCT INNER JOIN PRODUCT_CLASS
ON PRODUCT.PRODUCT_CLASS_CODE = PRODUCT_CLASS.PRODUCT_CLASS_CODE;

SELECT * FROM D1

ALTER TABLE D1
ADD SUBTOTAL1 INTEGER

CREATE TABLE C1 as SELECT A.CUSTOMER_ID, A.CUSTOMER_FNAME, A.CITY, A.PINCODE, B3.ORDER_ID, B3.PRODUCT_QUANTITY, B3.PRODUCT_ID
FROM A INNER JOIN B3
ON A.CUSTOMER_ID = B3.CUSTOMER_ID;

SELECT * FROM C1

SELECT C1.CUSTOMER_ID, C1.CUSTOMER_FNAME, C1.CITY, C1.PINCODE, C1.ORDER_ID, D1.PRODUCT_CLASS_DESC, D1.PRODUCT_DESC, C1.PRODUCT_QUANTITY*D1.PRODUCT_PRICE AS SUBTOTAL1
FROM C1 INNER JOIN D1
ON C1.PRODUCT_ID = D1.PRODUCT_ID
WHERE PINCODE NOT LIKE '%0%'
ORDER BY C1.CUSTOMER_FNAME AND D1.SUBTOTAL1;

-------------------BELOW IS QUESTION-5-------------------

SELECT PRODUCT.PRODUCT_ID, PRODUCT.PRODUCT_DESC, SUM(ORDER_ITEMS.PRODUCT_QUANTITY)
FROM PRODUCT INNER JOIN ORDER_ITEMS
ON PRODUCT.PRODUCT_ID = ORDER_ITEMS.PRODUCT_ID
WHERE ORDER_ITEMS.PRODUCT_QUANTITY IN(
	SELECT PRODUCT_QUANTITY
	FROM ORDER_ITEMS
	WHERE PRODUCT.PRODUCT_ID = 201
	);
	
-------------------BELOW IS QUESTION-6-------------------

CREATE TABLE K1 AS SELECT ONLINE_CUSTOMER.CUSTOMER_ID, ONLINE_CUSTOMER.CUSTOMER_FNAME, ONLINE_CUSTOMER.CUSTOMER_LNAME, ONLINE_CUSTOMER.CUSTOMER_EMAIL, ORDER_HEADER.ORDER_ID
FROM ORDER_HEADER LEFT JOIN ONLINE_CUSTOMER ON
ONLINE_CUSTOMER.CUSTOMER_ID = ONLINE_CUSTOMER.CUSTOMER_ID;

SELECT * FROM K1

CREATE TABLE L2 AS SELECT ORDER_ITEMS.ORDER_ID, ORDER_ITEMS.PRODUCT_QUANTITY, PRODUCT.PRODUCT_DESC, PRODUCT.PRODUCT_PRICE
FROM PRODUCT LEFT JOIN ORDER_ITEMS ON
PRODUCT.PRODUCT_ID = ORDER_ITEMS.PRODUCT_ID;

SELECT * FROM L2

ALTER TABLE L2
ADD SUBTOTAL INTEGER

SELECT K1.CUSTOMER_ID, K1.CUSTOMER_FNAME, K1.CUSTOMER_LNAME, K1.CUSTOMER_EMAIL, K1.ORDER_ID, L2.PRODUCT_DESC, L2.PRODUCT_QUANTITY, L2.PRODUCT_PRICE, PRODUCT_QUANTITY*PRODUCT_PRICE AS SUBTOTAL
FROM L2 INNER JOIN K1
ON K1.ORDER_ID = L2.ORDER_ID
GROUP BY K1.CUSTOMER_EMAIL
ORDER BY CUSTOMER_ID;</sql><current_tab id="0"/></tab_sql></sqlb_project>
